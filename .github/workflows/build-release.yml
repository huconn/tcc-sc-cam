name: Build and Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0, v0.9.0, etc.

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for git hash

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache Electron
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
            ~/AppData/Local/electron/Cache
            ~/Library/Caches/electron
          key: ${{ runner.os }}-electron-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-

      - name: Install dependencies
        run: |
          npm install --no-audit --no-fund
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: 0
          ELECTRON_CACHE: ${{ runner.temp }}/electron-cache

      - name: Build Electron app for Windows
        run: npm run build:win
        env:
          ELECTRON_BUILDER_SKIP_PUBLISH: true

      - name: List build artifacts
        shell: bash
        run: |
          echo "Contents of dist directory:"
          ls -la dist/ || true
          echo "Finding installer files:"
          find dist -name "*Setup*" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" 2>/dev/null || true

      - name: Upload Windows installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: dist/*Setup*.exe
          if-no-files-found: error

      - name: Upload Windows portable
        uses: actions/upload-artifact@v4
        with:
          name: windows-portable
          path: dist/*Portable*.exe
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Display structure of downloaded files
        run: |
          echo "Downloaded artifacts:"
          ls -R release-artifacts

      - name: Generate release notes
        id: generate_notes
        run: |
          # Get previous tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^${{ github.ref_name }}$" | head -1)

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, using all commits"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Comparing with previous tag: $PREVIOUS_TAG"
            COMMITS=$(git log ${PREVIOUS_TAG}..${{ github.ref_name }} --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Create release notes
          cat > release_notes.md << 'EOF'
          ## Telechips SOC Configuration Tool - ${{ github.ref_name }}

          ### What's Changed
          EOF

          if [ -z "$COMMITS" ]; then
            echo "- No changes recorded" >> release_notes.md
          else
            echo "$COMMITS" >> release_notes.md
          fi

          cat >> release_notes.md << 'EOF'

          ### Installation
          - **Windows**: Download and run the `.exe` installer
          - **macOS**: Download and open the `.dmg` file
          - **Linux**: Download the `.AppImage` (or `.deb`/`.rpm` for specific distributions)

          ### System Requirements
          - Windows 10 or later / macOS 10.13+ / Linux (64-bit)
          - 4GB RAM minimum
          - 200MB free disk space
          EOF

          echo "Release notes generated:"
          cat release_notes.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}

      - name: Find Windows installer files
        id: find_files
        run: |
          INSTALLER_FILE=$(find ./release-artifacts/windows-installer -name "*Setup*.exe" | head -1)
          PORTABLE_FILE=$(find ./release-artifacts/windows-portable -name "*Portable*.exe" | head -1)
          echo "installer_path=$INSTALLER_FILE" >> $GITHUB_OUTPUT
          echo "portable_path=$PORTABLE_FILE" >> $GITHUB_OUTPUT
          echo "Found installer: $INSTALLER_FILE"
          echo "Found portable: $PORTABLE_FILE"

      - name: Upload Windows Installer to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_files.outputs.installer_path }}
          asset_name: Telechips-SOC-Tool-Setup-${{ github.ref_name }}.exe
          asset_content_type: application/octet-stream

      - name: Upload Windows Portable to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_files.outputs.portable_path }}
          asset_name: Telechips-SOC-Tool-Portable-${{ github.ref_name }}.exe
          asset_content_type: application/octet-stream